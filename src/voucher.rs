use serde::{Deserialize, Serialize};

/// Deserializing the voucher file generated by `audible-cli`
/// All I need is two fields but since this is a generated struct I'll just leave it as is
#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct AudibleCliVoucher {
    #[serde(rename = "content_license")]
    pub content_license: ContentLicense,
    #[serde(rename = "response_groups")]
    pub response_groups: Vec<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ContentLicense {
    pub acr: String,
    pub asin: String,
    #[serde(rename = "content_metadata")]
    pub content_metadata: ContentMetadata,
    #[serde(rename = "drm_type")]
    pub drm_type: String,
    #[serde(rename = "granted_right")]
    pub granted_right: String,
    #[serde(rename = "license_id")]
    pub license_id: String,
    #[serde(rename = "license_response")]
    pub license_response: LicenseResponse,
    #[serde(rename = "license_response_type")]
    pub license_response_type: String,
    pub message: String,
    #[serde(rename = "playback_info")]
    pub playback_info: PlaybackInfo,
    pub preview: bool,
    #[serde(rename = "request_id")]
    pub request_id: String,
    #[serde(rename = "requires_ad_supported_playback")]
    pub requires_ad_supported_playback: bool,
    #[serde(rename = "status_code")]
    pub status_code: String,
    #[serde(rename = "voucher_id")]
    pub voucher_id: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ContentMetadata {
    #[serde(rename = "content_reference")]
    pub content_reference: ContentReference,
    #[serde(rename = "content_url")]
    pub content_url: ContentUrl,
    #[serde(rename = "last_position_heard")]
    pub last_position_heard: LastPositionHeard,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ContentReference {
    pub acr: String,
    pub asin: String,
    pub codec: String,
    #[serde(rename = "content_format")]
    pub content_format: String,
    #[serde(rename = "content_size_in_bytes")]
    pub content_size_in_bytes: i64,
    #[serde(rename = "file_version")]
    pub file_version: String,
    pub marketplace: String,
    pub sku: String,
    pub tempo: String,
    pub version: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ContentUrl {
    #[serde(rename = "offline_url")]
    pub offline_url: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct LastPositionHeard {
    #[serde(rename = "last_updated")]
    pub last_updated: String,
    #[serde(rename = "position_ms")]
    pub position_ms: i64,
    pub status: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct LicenseResponse {
    pub key: String,
    pub iv: String,
    pub rules: Vec<Rule>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Rule {
    pub parameters: Vec<Parameter>,
    pub name: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Parameter {
    pub expire_date: String,
    #[serde(rename = "type")]
    pub type_field: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct PlaybackInfo {
    #[serde(rename = "last_position_heard")]
    pub last_position_heard: LastPositionHeard2,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct LastPositionHeard2 {
    #[serde(rename = "last_updated")]
    pub last_updated: String,
    #[serde(rename = "position_ms")]
    pub position_ms: i64,
    pub status: String,
}
